{"version":11,"variables":[{"key":"costAlert","type":"csv","input":"15","multiple":false},{"key":"timeZone","type":"csv","input":"UTC","multiple":false},{"key":"ddu","type":"csv","input":"1.70","multiple":false},{"key":"cost","type":"csv","input":".0035","multiple":false},{"key":"decimalPlace","type":"csv","input":"0, 1, 2, 3, 4, 5","multiple":false},{"key":"currency","type":"csv","input":"$, £, ¥","multiple":false},{"key":"accountId","type":"csv","input":"07b3f8a5-291c-483e-8f39-599754114105","multiple":false}],"tiles":{"3":{"type":"code","title":"Client Query Example","input":"import { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\nconst query = 'fetch dt.system.query_executions | filter status == \"SUCCEEDED\" | fields user, scanned_bytes | summarize total = sum(scanned_bytes) ,by:{user} | sort total desc';\n\nconst teams = [\n  { \"team\": \"teamA\", \"users\": [\"test.test@dynatrace.com\"] }, \n  { \"team\": \"teamB\", \"users\": [\"test4.test4@dynatrace.com\", \"test3.test3@dynatrace.com\"] },\n  { \"team\": \"teamC\", \"users\": [\"test1.test1@dynatrace.com\"] }\n];\n\nfunction checkCostAlert(cost){\n  if(cost > $costAlert){\n    return `⚠️`;\n  }\n  return `✅`;\n}\nexport default async function () {\n  console.log(globalThis);\n  const records = await queryExecutionClient\n      .queryExecute({\n        body: {\n          query,\n          requestTimeoutMilliseconds: 30000,\n          defaultTimeframeStart: $dt_timeframe_from,\n          defaultTimeframeEnd: $dt_timeframe_to,\n          timezone: $timeZone,\n        },\n      }).then((res)=>res.result.records);\n  console.log(\"DQL query results:\")\n  console.log(records);\n  console.log(\"-------------------------\")\n  console.log(\"filtering teams\")\n  const teamTotals = teams.map(team => {\n    const teamUsers = team.users;\n    const teamTotal = records\n      .filter(record => teamUsers.includes(record.user))\n      .reduce((acc, record) => acc + record.total, 0);\n    return { team: team.team, total: teamTotal, users: teamUsers };\n  });\n  console.log(\"-------------------------\")\n\n  console.log(\"calculating ddu and cost per team\")\n  const teamTotalsWithDDUAndCost = teamTotals.map(({team, total, users}) => {\n  const ddu = (total / 1073741824) * $ddu;\n  const cost = (total / 1073741824) * $cost;\n  const dduString = `${ddu.toFixed($decimalPlace)} DDU`;\n  const costString = `${$currency}${cost.toFixed($decimalPlace)}`;\n  const costAlert = checkCostAlert(cost)\n  return {\n      team,\n      costAlert: costAlert,\n      cost: costString,\n      ddu: dduString,\n      teamMembers: users,\n    };\n  });\n  console.log(\"-------------------------\")\n  return teamTotalsWithDDUAndCost\n}","visualization":"recordView","visualizationSettings":{"chartSettings":{"gapPolicy":"connect"},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[["teamMembers"]]}}},"5":{"type":"code","title":"Return timeseries data (auto-conversion)","input":"/*\n * This example shows how to visualize your data without explicitly describing\n * the types.\n */\nexport default async function () {\n  // Take 120 samples of a sine wave for a full period.\n  const sampleCount = 120;\n  return new Array(sampleCount).fill(null).map((_, index, array) => {\n    const invertedIndex = array.length - index;\n    const time = new Date().getTime();\n\n    return {\n      timestamp: new Date(time - 1000 * 60 * invertedIndex).toISOString(),\n      value: Math.sin((index / (array.length - 1)) * (2 * Math.PI)),\n    };\n  });\n}","visualization":"recordView","visualizationSettings":{"chartSettings":{"gapPolicy":"connect"},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[]}}},"7":{"type":"code","title":"Fetch external data","input":"/*\n* To fetch external data make sure to configure outbound connections.\n* Visit https://dt-url.net/allow-outbound-connections for details.\n*/\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\nasync function getTodos(){\n  const url = 'https://dummyjson.com/todos' //url to fetch\n  const result = await fetch(url) //fetch\n  .then(resp => resp.json())\n  .catch(error => {\n    console.error('Error:', error);\n    return error;\n  });\n  return result.todos ?? [];\n}\n\nexport default async function () {\n  const todos = await getTodos();\n  if(!todos){\n    return [];\n  }\n  console.log(todos);\n  const timeout = 60;\n  const query = `data json:\"${JSON.stringify(todos).replace(/\"/g, '\\\\\"')}\"\n  | fieldsAdd closed = if(completed, 1), open = if(NOT completed,1)\n  | summarize closed = sum(closed), open = sum(open), todos = collectArray(todo),by:{userId}`;\n  console.log(query);\n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout  } });\n\n  return response.result;\n}","visualization":"recordView","visualizationSettings":{"chartSettings":{"gapPolicy":"connect"},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"enableLineWrap":true,"hiddenColumns":[],"lineWrapIds":[["todos"]]}}},"8":{"type":"code","title":"Static External Data (CSV)","input":"/*\n* To fetch external data make sure to configure outbound connections.\n* Visit https://dt-url.net/allow-outbound-connections for details.\n*/\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\n// Convert CSV to JSON\nfunction csvToJSON(csvData) {\n  const lines = csvData.split('\\n');\n  const headers = lines[0].split(',');\n  const jsonData = [];\n\n  for (let i = 1; i < lines.length-1; i++) {\n    const values = lines[i].split(',');\n    const obj = {};\n\n    for (let j = 0; j < headers.length; j++) {\n      const header = headers[j].trim().replace(/^\"|\"$/g, '');\n      const value = values[j].trim();\n      obj[header] = value;\n    }\n\n    jsonData.push(obj);\n  }\n\n  return jsonData;\n}\n\nexport default async function () {\n  const data = await fetch('https://people.sc.fsu.edu/~jburkardt/data/csv/mlb_players.csv')\n    .then(response => response.text())\n    .catch(error => {\n      console.error('Error:', error);\n    });\n  //console.log(data);\n  const dataJSON = csvToJSON(data.replace(/\"/g, ''));\n  const dataString = `\"${JSON.stringify(dataJSON).replace(/\"/g, '\\\\\"')}\"`\n  const weight = \"`Weight(lbs)`\";\n  const height = \"`Height(inches)`\";\n  const timeout = 60;\n  // DQL Query\n  const query = `data json:${dataString}\n  | fieldsAdd positionByTeam = concat(Team,\"_\",Position)\n  | summarize players = count(),Age = round(avg(toDouble(Age)),decimals:2),\n  Weight = round(avg(toDouble(${weight})),decimals:2),\n  Height = round(avg(toDouble(${height})),decimals:2),by:{positionByTeam}`;\n  // Execute DQL Query\n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout  } });\n\n  return response.result;\n}","visualization":"recordView","visualizationSettings":{"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"absolute"},"categoricalBarChartSettings":{"categoryAxis":"positionByTeam","categoryAxisLabel":"positionByTeam","valueAxis":"Weight","valueAxisLabel":"Weight"}},"singleValue":{"showLabel":true,"label":"","autoscale":true},"table":{"enableLineWrap":true,"lineWrapIds":[]}}},"9":{"type":"markdown","title":"","content":"#### Dynatrace platform services and Dynatrace AppEngine API SDK\n\n"},"12":{"type":"markdown","title":"","content":"The SDK for TypeScript provides a TypeScript API for Dynatrace platform services and Dynatrace AppEngine functionality.\n\nIt consists of the following:\n- TypeScript packages focused on specific use cases to use Dynatrace platform functionality.\n- Modular clients for each Dynatrace platform service to reduce overhead on a specific use."},"13":{"type":"markdown","title":"","content":"#### Using the SDK in ad-hoc functions\nYou can use the SDK for TypeScript in ad-hoc functions in Dynatrace Workflows and Dynatrace Notebooks, which applies to all convenience packages (except UI-related ones) and low-level clients.\n\nFollowing is an example of how to ingest metrics in a workflow:\n```javascript\nimport { metricsClient } from '@dynatrace-sdk/client-classic-environment-v2';\n\nexport default async function () {\n  return metricsClient.ingest({ \n    body: 'cpu.temperature,hostname=hostA,cpu=1 55' \n  });\n}```"},"14":{"type":"markdown","title":"","content":"Dynatrace Developer Portal - https://developer.dynatrace.com\n\n![Developer Portal ICON](https://dt-cdn.net/images/dynatrace-developer-1413-5ac0945512.webp)"},"15":{"type":"markdown","title":"","content":"Dynatrace JavaScript support includes native JS packages like Math and Date in the Code Tile/Action. This enables developers to leverage the full functionality of these native JavaScript packages within their Dynatrace Dashboards and Notebooks, enhancing data processing, calculations, and date/time manipulations.\n\nFollowing is an example of how to ingest metrics in a workflow:\n```javascript\nexport default async function () {\n  // Take 120 samples of a sine wave for a full period.\n  const sampleCount = 120;\n  return new Array(sampleCount).fill(null).map((_, index, array) => {\n    const invertedIndex = array.length - index;\n    const time = new Date().getTime();\n\n    return {\n      timestamp: new Date(time - 1000 * 60 * invertedIndex).toISOString(),\n      value: Math.sin((index / (array.length - 1)) * (2 * Math.PI)),\n    };\n  });\n}```"},"16":{"type":"markdown","title":"","content":"#### Native JavaScript Package Support "},"17":{"type":"markdown","title":"","content":"#### External Fetch Static Data"},"18":{"type":"markdown","title":"","content":"This example helps illustrate the possibly of applying the power of DQL client to external static files.\n\nFollowing is an example of how to ingest metrics in a workflow:\n```javascript\nexport default async function () {\n  const data = await fetch('https://people.sc.fsu.edu/~jburkardt/data/csv/mlb_players.csv')\n    .then(response => response.text())\n    .catch(error => {\n      console.error('Error:', error);\n    });\n  //console.log(data);\n  const dataJSON = csvToJSON(data.replace(/\"/g, ''));\n  const dataString = `\"${JSON.stringify(dataJSON).replace(/\"/g, '\\\\\"')}\"`\n  const weight = \"`Weight(lbs)`\";\n  const height = \"`Height(inches)`\";\n  const timeout = 60;\n  // DQL Query\n  const query = `data json:${dataString}\n  | fieldsAdd positionByTeam = concat(Team,\"_\",Position)\n  | summarize players = count(),Age = round(avg(toDouble(Age)),decimals:2),\n  Weight = round(avg(toDouble(${weight})),decimals:2),\n  Height = round(avg(toDouble(${height})),decimals:2),by:{positionByTeam}`;\n  // Execute DQL Query\n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout  } });\n\n  return response.result;\n}```"},"19":{"type":"markdown","title":"","content":"#### External Fetch API/Rest Data"},"20":{"type":"markdown","title":"","content":"This example helps illustrate the possibly of applying the power of DQL client to external API/REST data.\n\nFollowing is an example of how to ingest metrics in a workflow:\n```javascript\nimport { queryExecutionClient } from '@dynatrace-sdk/client-query';\n\nasync function getTodos(){\n  const url = 'https://dummyjson.com/todos' //url to fetch\n  const result = await fetch(url) //fetch\n  .then(resp => resp.json())\n  .catch(error => {\n    console.error('Error:', error);\n    return error;\n  });\n  return result.todos ?? [];\n}\n\nexport default async function () {\n  const todos = await getTodos();\n  if(!todos){\n    return [];\n  }\n  console.log(todos);\n  const timeout = 60;\n  const query = `data json:\"${JSON.stringify(todos).replace(/\"/g, '\\\\\"')}\"\n  | fieldsAdd closed = if(completed, 1), open = if(NOT completed,1)\n  | summarize closed = sum(closed), open = sum(open), todos = collectArray(todo),by:{userId}`;\n  console.log(query);\n  const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout  } });\n\n  return response.result;\n}```"}},"layouts":{"3":{"x":0,"y":11,"w":24,"h":5},"5":{"x":0,"y":25,"w":24,"h":6},"7":{"x":0,"y":65,"w":24,"h":7},"8":{"x":0,"y":43,"w":24,"h":8},"9":{"x":0,"y":0,"w":14,"h":1},"12":{"x":0,"y":1,"w":14,"h":4},"13":{"x":0,"y":5,"w":14,"h":6},"14":{"x":14,"y":0,"w":10,"h":11},"15":{"x":0,"y":17,"w":24,"h":8},"16":{"x":0,"y":16,"w":24,"h":1},"17":{"x":0,"y":31,"w":24,"h":1},"18":{"x":0,"y":32,"w":24,"h":11},"19":{"x":0,"y":51,"w":24,"h":1},"20":{"x":0,"y":52,"w":24,"h":13}}}